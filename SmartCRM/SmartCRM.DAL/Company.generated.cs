#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using SmartCRM.DAL;

namespace SmartCRM.DAL	
{
	[Table("companies")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private uint _userID;
		[Column("UserID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_userID")]
		public virtual uint UserID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if(this._userID != value)
				{
					this.OnPropertyChanging("UserID");
					this._userID = value;
					this.OnPropertyChanged("UserID");
				}
			}
		}
		
		private DateTime _lastUpdateTime;
		[Column("LastUpdateTime", OpenAccessType = OpenAccessType.DateTime, Length = 0, Scale = 0, SqlType = "timestamp")]
		[Storage("_lastUpdateTime")]
		public virtual DateTime LastUpdateTime
		{
			get
			{
				return this._lastUpdateTime;
			}
			set
			{
				if(this._lastUpdateTime != value)
				{
					this.OnPropertyChanging("LastUpdateTime");
					this._lastUpdateTime = value;
					this.OnPropertyChanged("LastUpdateTime");
				}
			}
		}
		
		private string _companyNotes;
		[Column("CompanyNotes", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyNotes")]
		public virtual string CompanyNotes
		{
			get
			{
				return this._companyNotes;
			}
			set
			{
				if(this._companyNotes != value)
				{
					this.OnPropertyChanging("CompanyNotes");
					this._companyNotes = value;
					this.OnPropertyChanged("CompanyNotes");
				}
			}
		}
		
		private string _companyName;
		[Column("CompanyName", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyName")]
		public virtual string CompanyName
		{
			get
			{
				return this._companyName;
			}
			set
			{
				if(this._companyName != value)
				{
					this.OnPropertyChanging("CompanyName");
					this._companyName = value;
					this.OnPropertyChanged("CompanyName");
				}
			}
		}
		
		private string _companyMol;
		[Column("CompanyMol", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyMol")]
		public virtual string CompanyMol
		{
			get
			{
				return this._companyMol;
			}
			set
			{
				if(this._companyMol != value)
				{
					this.OnPropertyChanging("CompanyMol");
					this._companyMol = value;
					this.OnPropertyChanged("CompanyMol");
				}
			}
		}
		
		private string _companyMobile;
		[Column("CompanyMobile", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyMobile")]
		public virtual string CompanyMobile
		{
			get
			{
				return this._companyMobile;
			}
			set
			{
				if(this._companyMobile != value)
				{
					this.OnPropertyChanging("CompanyMobile");
					this._companyMobile = value;
					this.OnPropertyChanged("CompanyMobile");
				}
			}
		}
		
		private byte[] _companyLogo;
		[Column("CompanyLogo", OpenAccessType = OpenAccessType.LongVarBinary, IsNullable = true, Length = 0, Scale = 0, SqlType = "mediumblob")]
		[Storage("_companyLogo")]
		public virtual byte[] CompanyLogo
		{
			get
			{
				return this._companyLogo;
			}
			set
			{
				if(this._companyLogo != value)
				{
					this.OnPropertyChanging("CompanyLogo");
					this._companyLogo = value;
					this.OnPropertyChanged("CompanyLogo");
				}
			}
		}
		
		private uint _companyID;
		[Column("CompanyID", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_companyID")]
		public virtual uint CompanyID
		{
			get
			{
				return this._companyID;
			}
			set
			{
				if(this._companyID != value)
				{
					this.OnPropertyChanging("CompanyID");
					this._companyID = value;
					this.OnPropertyChanged("CompanyID");
				}
			}
		}
		
		private string _companyIBAN;
		[Column("CompanyIBAN", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyIBAN")]
		public virtual string CompanyIBAN
		{
			get
			{
				return this._companyIBAN;
			}
			set
			{
				if(this._companyIBAN != value)
				{
					this.OnPropertyChanging("CompanyIBAN");
					this._companyIBAN = value;
					this.OnPropertyChanged("CompanyIBAN");
				}
			}
		}
		
		private string _companyEmail;
		[Column("CompanyEmail", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 65, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyEmail")]
		public virtual string CompanyEmail
		{
			get
			{
				return this._companyEmail;
			}
			set
			{
				if(this._companyEmail != value)
				{
					this.OnPropertyChanging("CompanyEmail");
					this._companyEmail = value;
					this.OnPropertyChanged("CompanyEmail");
				}
			}
		}
		
		private string _companyCity;
		[Column("CompanyCity", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 150, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyCity")]
		public virtual string CompanyCity
		{
			get
			{
				return this._companyCity;
			}
			set
			{
				if(this._companyCity != value)
				{
					this.OnPropertyChanging("CompanyCity");
					this._companyCity = value;
					this.OnPropertyChanged("CompanyCity");
				}
			}
		}
		
		private string _companyBank;
		[Column("CompanyBank", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 150, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyBank")]
		public virtual string CompanyBank
		{
			get
			{
				return this._companyBank;
			}
			set
			{
				if(this._companyBank != value)
				{
					this.OnPropertyChanging("CompanyBank");
					this._companyBank = value;
					this.OnPropertyChanged("CompanyBank");
				}
			}
		}
		
		private string _companyBIC;
		[Column("CompanyBIC", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyBIC")]
		public virtual string CompanyBIC
		{
			get
			{
				return this._companyBIC;
			}
			set
			{
				if(this._companyBIC != value)
				{
					this.OnPropertyChanging("CompanyBIC");
					this._companyBIC = value;
					this.OnPropertyChanged("CompanyBIC");
				}
			}
		}
		
		private string _companyAddress;
		[Column("CompanyAddress", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 256, Scale = 0, SqlType = "nvarchar")]
		[Storage("_companyAddress")]
		public virtual string CompanyAddress
		{
			get
			{
				return this._companyAddress;
			}
			set
			{
				if(this._companyAddress != value)
				{
					this.OnPropertyChanging("CompanyAddress");
					this._companyAddress = value;
					this.OnPropertyChanged("CompanyAddress");
				}
			}
		}
		
		private string _bulstat;
		[Column("Bulstat", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 15, Scale = 0, SqlType = "nvarchar")]
		[Storage("_bulstat")]
		public virtual string Bulstat
		{
			get
			{
				return this._bulstat;
			}
			set
			{
				if(this._bulstat != value)
				{
					this.OnPropertyChanging("Bulstat");
					this._bulstat = value;
					this.OnPropertyChanged("Bulstat");
				}
			}
		}
		
		private User _user;
		[ForeignKeyAssociation(ConstraintName = "FK_companies_users_UserID", SharedFields = "UserID", TargetFields = "UserID")]
		[Storage("_user")]
		public virtual User User
		{
			get
			{
				return this._user;
			}
			set
			{
				if(this._user != value)
				{
					this.OnPropertyChanging("User");
					this._user = value;
					this.OnPropertyChanged("User");
				}
			}
		}
		
		private IList<Person> _people = new List<Person>();
		[JoinTableAssociation(TableName = "companies_persons", OwnerColumns = "CompanyID", TargetColumns = "PersonID", SourceConstraint = "FK_companies_persons_companies_CompanyID", TargetConstraint = "FK_companies_persons_persons_PersonID")]
		[Column("CompanyID", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Column("PersonID", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_people")]
		public virtual IList<Person> People
		{
			get
			{
				return this._people;
			}
		}
		
		private IList<CompanyFile> _companyFiles = new List<CompanyFile>();
		[Collection(InverseProperty = "Company")]
		[Storage("_companyFiles")]
		public virtual IList<CompanyFile> CompanyFiles
		{
			get
			{
				return this._companyFiles;
			}
		}
		
		private IList<CompaniesValue> _companiesValues = new List<CompaniesValue>();
		[Collection(InverseProperty = "Company")]
		[Storage("_companiesValues")]
		public virtual IList<CompaniesValue> CompaniesValues
		{
			get
			{
				return this._companiesValues;
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
