#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using SmartCRM.DAL;

namespace SmartCRM.DAL	
{
	[Table("projects")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private uint _id;
		[Column("Id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_id")]
		public virtual uint Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if(this._id != value)
				{
					this.OnPropertyChanging("Id");
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		private string _name;
		[Column("Name", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 50, Scale = 0, SqlType = "nvarchar")]
		[Storage("_name")]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this.OnPropertyChanging("Name");
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private DateTime _startDate;
		[Column("StartDate", OpenAccessType = OpenAccessType.DateTime, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_startDate")]
		public virtual DateTime StartDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if(this._startDate != value)
				{
					this.OnPropertyChanging("StartDate");
					this._startDate = value;
					this.OnPropertyChanged("StartDate");
				}
			}
		}
		
		private DateTime? _endDate;
		[Column("EndDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_endDate")]
		public virtual DateTime? EndDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if(this._endDate != value)
				{
					this.OnPropertyChanging("EndDate");
					this._endDate = value;
					this.OnPropertyChanged("EndDate");
				}
			}
		}
		
		private short _status;
		[Column("Status", OpenAccessType = OpenAccessType.Int16, Length = 0, Scale = 0, SqlType = "smallint")]
		[Storage("_status")]
		public virtual short Status
		{
			get
			{
				return this._status;
			}
			set
			{
				if(this._status != value)
				{
					this.OnPropertyChanging("Status");
					this._status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}
		
		private uint _projectCategoryId;
		[Column("ProjectCategoryId", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_projectCategoryId")]
		public virtual uint ProjectCategoryId
		{
			get
			{
				return this._projectCategoryId;
			}
			set
			{
				if(this._projectCategoryId != value)
				{
					this.OnPropertyChanging("ProjectCategoryId");
					this._projectCategoryId = value;
					this.OnPropertyChanged("ProjectCategoryId");
				}
			}
		}
		
		private ConstProjectCategory _constProjectCategory;
		[ForeignKeyAssociation(ConstraintName = "FK_projects_const_project_categories_Id", SharedFields = "ProjectCategoryId", TargetFields = "Id")]
		[Storage("_constProjectCategory")]
		public virtual ConstProjectCategory ConstProjectCategory
		{
			get
			{
				return this._constProjectCategory;
			}
			set
			{
				if(this._constProjectCategory != value)
				{
					this.OnPropertyChanging("ConstProjectCategory");
					this._constProjectCategory = value;
					this.OnPropertyChanged("ConstProjectCategory");
				}
			}
		}
		
		private IList<Employee> _employees = new List<Employee>();
		[JoinTableAssociation(TableName = "projects_employees", OwnerColumns = "ProjectId", TargetColumns = "EmployeeId", SourceConstraint = "FK_projects_employees_projects_Id", TargetConstraint = "FK_projects_employees_employees_Id")]
		[Column("ProjectId", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Column("EmployeeId", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_employees")]
		public virtual IList<Employee> Employees
		{
			get
			{
				return this._employees;
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
